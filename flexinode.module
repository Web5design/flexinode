<?php
/**
 * Embedded a flexinode entity edit form into any other fieldable enity.
 * Giving you the power to define re-usable content types without writing complex forms
 *
 * Inspiration comes from model,flexifield and field_collection modules
 *
 * @author : RenÃ© Bakx (rene@71media.net)
 */

include_once("flexinode.field.inc");


function flexinode_entity_info() {
  $return['flexinode'] = array(
    'label' => t('Flexinode'),
    'plural label' => t('Flexinodes'),
    'description' => t('An entity type that can be embedded as a one2many field in other entities'),
    'entity class' => 'Flexinode',
    'controller class' => 'FlexinodeController',
    'file' => 'flexinode.controller.inc',
    'base table' => 'flexinode',
    'revision table' => 'flexinode_revision',
    'translation' => array(
      'locale' => TRUE,
    ),
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'flid',
      'bundle' => 'type',
      'label' => 'label',
      'revision' => 'vid',
      'language' => 'language',
    ),
    // Bundles are defined by the flexinode types below and loaded in flexinode_entity_info_alter
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('teaser'),
        'custom settings' => FALSE,
      ),
      'rss' => array(
        'label' => t('RSS'),
        'custom settings' => FALSE,
      ),
    ),
    'module' => 'flexinode', // name of the module this entity belongs to
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
  );
  if (module_exists('search')) {
    $return['flexinode']['view modes'] += array(
      'search_index' => array(
        'label' => t('Search index'),
        'custom settings' => FALSE,
      ),
      'search_result' => array(
        'label' => t('Search result'),
        'custom settings' => FALSE,
      ),
    );
  }

  // The entity bundle that holds information about the flexinode types
  $return['flexinode_type'] = array(
    'label' => t('Flexinode Type'),
    'plural label' => t('Flexinode types'),
    'entity class' => 'FlexinodeType',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'flexinode_type',
    'fieldable' => FALSE,
    'bundle of' => 'flexinode',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'flexinode',
    'admin ui' => array(
      'menu wildcard' => '%flexinode_type',
      'path' => 'admin/structure/flexinodes',
      'file' => 'flexinodetype.controller.inc',
      'controller class' => 'FlexinodeTypeUIController',
    ),
  );

  if (module_exists('entitycache')) {
    $return['flexinode_type']['field cache'] = FALSE;
    $return['flexinode_type']['entity cache'] = TRUE;
  }

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function flexinode_entity_info_alter(&$entity_info) {
  foreach (flexinode_get_types() as $type => $info) {
    $entity_info['flexinode']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/flexinodes/manage/%flexinode_type',
        'real path' => 'admin/structure/flexinodes/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer flexinodes'),
      ),
    );
  }
}

function template_preprocess_flexinode(&$variables) {
  template_preprocess_entity($variables);
}

/**
 * Implements hook_entity_metadata_hook_entity_info().
 * @return array
 */
function flexinode_metadata_hook_entity_info() {
  return array(
    'flexinode' => array(
      'label' => t('Flexinode'),
      'label callback' => 'entity_class_label',
      'access callback' => 'flexinode_type_access',
      'access arguments' => array('administer flexinodes'),
    ),
  );
}

/**
 * Returns either all the types or the $type_name flexinode_type
 * @param NULL $type_name
 * @return array|mixed
 */
function flexinode_get_types($type_name = NULL, $indexed = FALSE) {

  $types = entity_load_multiple_by_name(
    'flexinode_type',
    isset($type_name) ? array($type_name)
      : FALSE
  );
  if ($indexed) {
    $return = array();
    foreach ($types as $type) {
      $return[$type->id] = $type;
    }

  }
  else {
    $return = isset($type_name) ? reset($types) : $types;
  }
  if (is_array($return)) {
    ksort($return);
  }
  return $return;
}


/**
 * Menu wildcard loader
 *
 * @param $type
 * @return array|mixed
 */
function flexinode_type_load($type) {
  return flexinode_get_types($type);
}

/**
 * Implements hook_permission().
 */
function flexinode_permission() {
  $permissions = array(
    'administer flexinodes' => array(
      'title' => t('Administer flexinodes'),
      'description' => t('Administer fields on flexinode types'),
    ),
  );
  return $permissions;
}

/**
 * Implements the above definied permission check
 */
function flexinode_type_access($op) {
  return user_access($op);
}

function flexinode_theme() {
  return array(
    'flexinode' => array(
      'render element' => 'elements',
      'template' => 'flexinode',
    ),
  );
}


//see entity_get_info() why ;) hint : 'load hook' => $name . '_load'
function flexinode_load($flid, $reset = FALSE) {
  $models = flexinode_load_multiple(array($flid), array(), $reset);
  return reset($models);
}


function flexinode_load_multiple($flids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('flexinode', $flids, $conditions, $reset);

}


function flexinode_delete_multiple(array $flids) {
  entity_get_controller('flexinode')->delete($flids);
}


function flexinode_create($values = array()) {
  return entity_get_controller('flexinode')->create($values);
}

function flexinode_delete(Flexinode $flexinode) {
  $flexinode->delete();
}

function flexinode_save(Flexinode $flexinode) {
  return $flexinode->save();
}


/**
 * create and returns the entity, for viewing and embedding in the host entity.
 */
function flexinode_field_get_entity(&$item, $reset = FALSE) {

  if (isset($item['entity'])) {
    return $item['entity'];
  }
  elseif (isset($item['flid']) && is_numeric($item['flid'])) {
    // this load the default entity from the cache if available
    $entity = flexinode_load($item['flid'],$reset);
    if (!is_object($entity) || $entity->vid != $item['vid']) {
      // and it seems that a cache hit was invalid or the revision is different. So load revision instead!
      $entity = entity_revision_load('flexinode', $item['vid']);
    }
    $item['entity'] = $entity;
    return $entity;
  }
  elseif (!isset($item['entity']) && (!is_null($item['type']) && $item['type'] !== '')) {
    $item['entity'] = entity_create('flexinode', array('type' => $item['type']));
    return $item['entity'];
  }
  return FALSE;
}


/**
 * Implements hook_field_formatter_view().
 */
function flexinode_field_formatter_view($flexinode_type, $flexinode, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => &$item) {
    flexinode_field_get_entity($item);
    if ($flexinode) {
      switch ($display['type']) {
        case 'flexinode_default':
        default:
          $element[$delta] = $item['entity']->view();
          break;
      }
    }
  }
  return $element;
}


/**
 * The class used for model type entities
 */
class FlexinodeType extends Entity {

  public $type;
  public $label;
  public $status;

  public function __construct($values = array()) {
    if ($values) {
      if (!isset($values['status'])) {
        $values['status'] = ENTITY_CUSTOM;
      }
    }
    parent::__construct($values, 'flexinode_type');
  }


}

class FlexinodeTypeMetadataController extends EntityDefaultMetadataController {

  public function entityPropertyInfo() {
    $info = parent::entityPropertyInfo();
    $properties = & $info['flexinode_type']['properties'];

    $properties['field_name']['label'] = t('Field name');
    $properties['field_name']['description'] = t('The machine-readable name of the flexinode field containing this item.');
    $properties['field_name']['required'] = TRUE;

    $properties['type'] = array(
      'label' => t('Flexinode type'),
      'type' => 'token',
      'description' => t('machine name of the flexinode'),
      'required' => TRUE,
    );

    return $info;
  }

}
