<?php
/**
 * @file
 * Embedded a flexinode entity edit form into any other fieldable enity.
 * Giving you the power to define re-usable content types without writing complex forms
 *
 * Inspiration comes from model,flexifield and field_collection modules
 *
 * @author : RenÃ© Bakx (rene@71media.net)
 */

include_once("flexinode.field.inc");

/**
 * Implements hook_entity_info().
 * @return array
 */
function flexinode_entity_info() {
  $return['flexinode'] = array(
    'label' => t('Flexinode'),
    'entity class' => 'Flexinode',
    'controller class' => 'FlexinodeController',
    'file' => 'flexinode.controllers.inc',
    'base table' => 'flexinode',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'flid',
      'bundle' => 'type',
    ),
    // Bundles are defined by the flexinode types below and loaded in flexinode_entity_info_alter
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('teaser'),
        'custom settings' => FALSE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'flexinode_create',
    'module' => 'flexinode', // name of the module this entity belongs to
    // The information below is used by the ModelUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/flexinode',
      'file' => 'flexinode.ui.controllers.inc',
      'controller class' => 'FlexinodeUIController',
      'menu wildcard' => '%flexinode',
    ),
  );
  // The entity bundle that holds information about the entity types
  $return['flexinode_type'] = array(
    'label' => t('Flexinode Type'),
    'entity class' => 'FlexinodeType',
    'controller class' => 'FlexinodeTypeController',
    'file' => 'flexinode.controllers.inc',
    'base table' => 'flexinode_type',
    'fieldable' => FALSE,
    'bundle of' => 'flexinode',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'flexinode_type_access',
    'module' => 'flexinode',
    'admin ui' => array(
      'path' => 'admin/structure/flexinodes',
      'file' => 'flexinode.ui.controllers.inc',
      'controller class' => 'FlexinodeTypeUIController',
    ),
  );
  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function flexinode_entity_info_alter(&$entity_info) {
  foreach (flexinode_get_types() as $type => $info) {
    $entity_info['flexinode']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/flexinodes/manage/%flexinode_type',
        'real path' => 'admin/structure/flexinodes/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer flexinodes'),
      ),
    );
  }
}


/**
 * Implements hook_entity_metadata_hook_entity_info().
 * @return array
 */
function flexinode_metadata_hook_entity_info() {
  return array(
    'flexinode' => array(
      'label' => t('Flexinode'),
      'access callback' => 'flexinode_type_access',
      'access arguments' => array('administer flexinodes'),
    ),
  );
}

/**
 * Returns either all the types or the $type_name flexinode_type
 * @param NULL $type_name
 * @return array|mixed
 */
function flexinode_get_types($type_name = NULL, $indexed = FALSE) {
  $types = entity_load_multiple_by_name('flexinode_type', isset($type_name) ? array($type_name)
                                                                : FALSE);
  if ($indexed) {
    $return = array();
    foreach ($types as $type) {
      $return[$type->id] = $type;
    }
  }
  else {
    $return = isset($type_name) ? reset($types) : $types;
  }
  return $return;
}


/**
 * Menu wildcard loader
 *
 * @param $type
 * @return array|mixed
 */
function flexinode_type_load($type) {
  return flexinode_get_types($type);
}

/**
 * Implements hook_permission().
 */
function flexinode_permission() {
  $permissions = array(
    'administer flexinodes' => array(
      'title' => t('Administer flexinodes'),
      'description' => t('Administer fields on flexinode types'),
    ),
  );
  return $permissions;
}

/**
 * Implements the above definied permission check
 */
function flexinode_type_access($op) {
  return user_access($op);
}

//see entity_get_info() why ;) hint : 'load hook' => $name . '_load'
function flexinode_load_flexinode($flid, $reset = FALSE) {
  $models = flexinode_load_multiple(array($flid), array(), $reset);
  return reset($models);
}


function flexinode_load_multiple($flids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('flexinode', $flids, $conditions, $reset);

}


function flexinode_delete_multiple(array $flids) {
  entity_get_controller('flexinode')->delete($flids);
}


function flexinode_create($values = array()) {
  return entity_get_controller('flexinode')->create($values);
}

function flexinode_delete(Flexinode $flexinode) {
  $flexinode->delete();
}

function flexinode_save(Flexinode $flexinode) {
  return $flexinode->save();
}





///**
// * 1. Adds theme hook suggestions for flexinode type specific templates.
// * 2. Calls flexinode type specific preprocess hooks.
// */
//function flexinode_preprocess_flexinode(&$variables)
//{
//  template_preprocess_entity($variables);
//
//  echo "<pre>@".__FILE__." line ".__LINE__."<br>";var_dump($variables);echo "</pre>";
//  die("DIED @".__FILE__." line ".__LINE__);
//
//  $all_flexinode_types = flexinode_get_types(NULL, TRUE);
//  foreach ($all_flexinode_types as $flexinode_type) {
//    $variables['theme_hook_suggestions'][] = 'flexinode__' . $flexinode_type->type;
//    $hook_name = 'preprocess_flexinode_' . $flexinode_type->type;
//    foreach (module_implements($hook_name) as $module) {
//      $function = $module . '_' . $hook_name;
//      $function($variables);
//    }
//  }
//}

function flexinode_flexinode_view_alter(&$variables){
 // $variables['#theme'] = 'flexinode';
}
/**
 * hook_theme
 */
function flexinode_theme()
{
  return array(
    'flexinode' => array(
      'render element' => 'elements',
      'template' => 'flexinode',
    ),
  );
}

function template_preprocess_flexinode(&$variables) {

  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $entity_type = $variables['elements']['#entity_type'];
  $variables['entity_type'] = $entity_type;
  $entity = $variables['elements']['#entity'];
  $variables[$variables['elements']['#entity_type']] = $entity;
  $info = entity_get_info($entity_type);

  $variables['title'] = check_plain(entity_label($entity_type, $entity));
  if (isset($variables['elements']['#page'])) {
    // If set by the caller, respect the page property.
    $variables['page'] = $variables['elements']['#page'];
  }
  else {
    // Else, try to automatically detect it.
    $uri = entity_uri($entity_type, $entity);
    $variables['url'] = $uri ? url($uri['path'], $uri['options']) : FALSE;
    $variables['page'] = $uri && $uri['path'] == $_GET['q'];
  }

  // Helpful $content variable for templates.
  $variables['content'] = array();
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  if (!empty($info['fieldable'])) {
    // Make the field variables available with the appropriate language.
    field_attach_preprocess($entity_type, $entity, $variables['content'], $variables);
  }
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);

  // Gather css classes.
  $variables['classes_array'][] = drupal_html_class('entity-' . $entity_type);
  $variables['classes_array'][] = drupal_html_class($entity_type . '-' . $bundle);

  // Add RDF type and about URI.
  if (module_exists('rdf')) {
    $variables['attributes_array']['about'] = empty($uri['path']) ? NULL : url($uri['path']);
    $variables['attributes_array']['typeof'] = empty($entity->rdf_mapping['rdftype']) ? NULL : $entity->rdf_mapping['rdftype'];
  }

  // Add suggestions.
  $variables['theme_hook_suggestions'][] = $entity_type;
  $variables['theme_hook_suggestions'][] = $entity_type . '__' . $bundle;
  $variables['theme_hook_suggestions'][] = $entity_type . '__' . $bundle . '__' . $variables['view_mode'];
  if ($id = entity_id($entity_type, $entity)) {
    $variables['theme_hook_suggestions'][] = $entity_type . '__' . $id;
  }
}

/**
 * The class used for model entities
 */
class Flexinode extends Entity {
  public $is_new, $flid, $created, $changed;

  public function __construct($values = array()) {
    parent::__construct($values, 'flexinode');
  }

  /**
   * Handles the creating/updating for a embedded flexinode, moves the fields from ['content'] into the correct position
   * to be further processed and saved.
   * The fields are already processed on the submission of the host form, so just copy and save.
   *
   * @param $form Array subform used to create this flexinode
   * @param $form_state
   * @return $flid PK of the newly created flexinode
   */
  public function submit($form, $form_state) {

    if ($this->is_new = isset($this->is_new) ? $this->is_new : 0) {
      $this->created = time();
    }
    field_attach_submit($this->entityType, $this, $form, $form_state);
    $this->changed = time();
    $this->save();
  }

  protected function defaultLabel() {
    if (isset($this->type)) {
      return t('Flexinode') . ' ' . $this->type;
    }
    return t('Flexinode');
  }

  protected function defaultUri() {
    return array('path' => 'flexinode/' . $this->flid);
  }

  public function create(array $values = array()) {
    // Add values that are specific to our Model
    $values += array(
      'flid' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
    );

    $flexinode = parent::create($values);
    return $flexinode;
  }

}


/**
 * The class used for model type entities
 */
class FlexinodeType extends Entity {

  public $type;
  public $label;
  public $status;

  public function __construct($values = array()) {
    if ($values) {
      $values['module'] = 'flexinode'; // set module to flexinode not sure if this needed..
      if (!isset($values['status'])) $values['status'] = ENTITY_IN_DB;
    }
    parent::__construct($values, 'flexinode_type');
  }


}


